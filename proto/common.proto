syntax = "proto3";
package proto;

option go_package = "./proto";

enum Spec {
	SpecBalanceDruid = 0;
	SpecElementalShaman = 1;
	SpecEnhancementShaman = 9;
	SpecFeralDruid = 12;
	SpecFeralTankDruid = 14;
	SpecHunter = 8;
	SpecMage = 2;
	SpecProtectionPaladin = 13;
	SpecRetributionPaladin = 3;
	SpecRogue = 7;
	SpecShadowPriest = 4;
	SpecSmitePriest = 10;
	SpecWarlock = 5;
	SpecWarrior = 6;
	SpecProtectionWarrior = 11;
	SpecDeathknight = 15;
	SpecTankDeathknight = 16;
}

enum Race {
	RaceUnknown = 0;
	RaceBloodElf = 1;
	RaceDraenei = 2;
	RaceDwarf = 3;
	RaceGnome = 4;
	RaceHuman = 5;
	RaceNightElf = 6;
	RaceOrc = 7;
	RaceTauren = 8;
	RaceTroll = 9;
	RaceUndead = 10;
}

enum Faction {
	Unknown = 0;
	Alliance = 1;
	Horde = 2;
}

enum ShattrathFaction {
  ShattrathFactionAldor = 0;
  ShattrathFactionScryer = 1;
}

enum Class {
	ClassUnknown = 0;
	ClassDruid = 1;
	ClassHunter = 2;
	ClassMage = 3;
	ClassPaladin = 4;
	ClassPriest = 5;
	ClassRogue = 6;
	ClassShaman = 7;
	ClassWarlock = 8;
	ClassWarrior = 9;
	ClassDeathknight = 10;
}

enum Profession {
	ProfessionUnknown = 0;
	Alchemy = 1;
	Blacksmithing = 2;
	Enchanting = 3;
	Engineering = 4;
	Herbalism = 5;
	Inscription = 6;
	Jewelcrafting = 7;
	Leatherworking = 8;
	Mining = 9;
	Skinning = 10;
	Tailoring = 11;
}

enum Stat {
	StatStrength = 0;
	StatAgility = 1;
	StatStamina = 2;
	StatIntellect = 3;
	StatSpirit = 4;
	StatSpellPower = 5;
	StatHealingPower = 6;
	StatArcaneSpellPower = 7;
	StatFireSpellPower = 8;
	StatFrostSpellPower = 9;
	StatHolySpellPower = 10;
	StatNatureSpellPower = 11;
	StatShadowSpellPower = 12;
	StatMP5 = 13;
	StatSpellHit = 14;
	StatSpellCrit = 15;
	StatSpellHaste = 16;
	StatSpellPenetration = 17;
	StatAttackPower = 18;
	StatMeleeHit = 19;
	StatMeleeCrit = 20;
	StatMeleeHaste = 21;
	StatArmorPenetration = 22;
	StatExpertise = 23;
	StatMana = 24;
	StatEnergy = 25;
	StatRage = 26;
	StatArmor = 27;
	StatRangedAttackPower = 28;
	StatDefense = 29;
	StatBlock = 30;
	StatBlockValue = 31;
	StatDodge = 32;
	StatParry = 33;
	StatResilience = 34;
	StatHealth = 35;
	StatArcaneResistance = 36;
	StatFireResistance = 37;
	StatFrostResistance = 38;
	StatNatureResistance = 39;
	StatShadowResistance = 40;
}

enum ItemType {
	ItemTypeUnknown = 0;
	ItemTypeHead = 1;
	ItemTypeNeck = 2;
	ItemTypeShoulder = 3;
	ItemTypeBack = 4;
	ItemTypeChest = 5;
	ItemTypeWrist = 6;
	ItemTypeHands = 7;
	ItemTypeWaist = 8;
	ItemTypeLegs = 9;
	ItemTypeFeet = 10;
	ItemTypeFinger = 11;
	ItemTypeTrinket = 12;
	ItemTypeWeapon = 13;
	ItemTypeRanged = 14;
}

enum ArmorType {
	ArmorTypeUnknown = 0;
	ArmorTypeCloth = 1;
	ArmorTypeLeather = 2;
	ArmorTypeMail = 3;
	ArmorTypePlate = 4;
}

enum WeaponType {
	WeaponTypeUnknown = 0;
	WeaponTypeAxe = 1;
	WeaponTypeDagger = 2;
	WeaponTypeFist = 3;
	WeaponTypeMace = 4;
	WeaponTypeOffHand = 5;
	WeaponTypePolearm = 6;
	WeaponTypeShield = 7;
	WeaponTypeStaff = 8;
	WeaponTypeSword = 9;
}

enum HandType {
	HandTypeUnknown = 0;
	HandTypeMainHand = 1;
	HandTypeOneHand = 2;
	HandTypeOffHand = 3;
	HandTypeTwoHand = 4;
}

enum RangedWeaponType {
	RangedWeaponTypeUnknown = 0;
	RangedWeaponTypeBow = 1;
	RangedWeaponTypeCrossbow = 2;
	RangedWeaponTypeGun = 3;
	RangedWeaponTypeIdol = 4;
	RangedWeaponTypeLibram = 5;
	RangedWeaponTypeThrown = 6;
	RangedWeaponTypeTotem = 7;
	RangedWeaponTypeWand = 8;
	RangedWeaponTypeSigil = 9;
}

// All slots on the gear menu where a single item can be worn.
enum ItemSlot {
	ItemSlotHead = 0;
	ItemSlotNeck = 1;
	ItemSlotShoulder = 2;
	ItemSlotBack = 3;
	ItemSlotChest = 4;
	ItemSlotWrist = 5;
	ItemSlotHands = 6;
	ItemSlotWaist = 7;
	ItemSlotLegs = 8;
	ItemSlotFeet = 9;
	ItemSlotFinger1 = 10;
	ItemSlotFinger2 = 11;
	ItemSlotTrinket1 = 12;
	ItemSlotTrinket2 = 13;
	ItemSlotMainHand = 14; // can be 1h or 2h
	ItemSlotOffHand = 15;
	ItemSlotRanged = 16;
}

enum ItemQuality {
	ItemQualityJunk = 0;
	ItemQualityCommon = 1;
	ItemQualityUncommon = 2;
	ItemQualityRare = 3;
	ItemQualityEpic = 4;
	ItemQualityLegendary = 5;
}

enum GemColor {
	GemColorUnknown = 0;
	GemColorMeta = 1;
	GemColorRed = 2;
	GemColorBlue = 3;
	GemColorYellow = 4;
	GemColorGreen = 5;
	GemColorOrange = 6;
	GemColorPurple = 7;
	GemColorPrismatic = 8;
}

enum SpellSchool {
	SpellSchoolPhysical = 0;
	SpellSchoolArcane = 1;
	SpellSchoolFire = 2;
	SpellSchoolFrost = 3;
	SpellSchoolHoly = 4;
	SpellSchoolNature = 5;
	SpellSchoolShadow = 6;
}

enum TristateEffect {
	TristateEffectMissing = 0;
	TristateEffectRegular = 1;
	TristateEffectImproved = 2;
}

enum Explosive {
	ExplosiveUnknown = 0;
	ExplosiveSaroniteBomb = 1;
	ExplosiveCobaltFragBomb = 2;
}

enum Potions {
	UnknownPotion = 0;
	RunicHealingPotion = 1;
	RunicManaPotion = 2;
	IndestructiblePotion = 3;
	PotionOfSpeed = 4;
	PotionOfWildMagic = 5;

	DestructionPotion = 6;
	SuperManaPotion = 7;
	HastePotion = 8;
	MightyRagePotion = 9;
	FelManaPotion = 10;
	InsaneStrengthPotion = 11;
	IronshieldPotion = 12;
	HeroicPotion = 13;
}

enum Conjured {
	ConjuredUnknown = 0;
	ConjuredDarkRune = 1;
	ConjuredFlameCap = 2;
	ConjuredHealthstone = 5;

	ConjuredMageManaEmerald = 3;
	ConjuredRogueThistleTea = 4;
}

enum WeaponImbue {
	WeaponImbueUnknown = 0;
	WeaponImbueAdamantiteSharpeningStone = 1;
	WeaponImbueAdamantiteWeightstone = 5;
	WeaponImbueElementalSharpeningStone = 2;
	WeaponImbueBrilliantWizardOil = 3;
	WeaponImbueSuperiorWizardOil = 4;

	WeaponImbueShamanFlametongue = 6;
	WeaponImbueShamanFrostbrand = 7;
	WeaponImbueShamanRockbiter = 8;
	WeaponImbueShamanWindfury = 9;

	WeaponImbueRogueDeadlyPoison = 10;
	WeaponImbueRogueInstantPoison = 11;

	WeaponImbueRighteousWeaponCoating = 12;
}

enum Flask {
	FlaskUnknown = 0;
	FlaskOfTheFrostWyrm = 1;
	FlaskOfEndlessRage = 2;
	FlaskOfPureMojo = 3;
	FlaskOfStoneblood = 4;
	LesserFlaskOfToughness = 5;
	LesserFlaskOfResistance = 6;

	// TBC
	FlaskOfBlindingLight = 7;
	FlaskOfMightyRestoration = 8;
	FlaskOfPureDeath = 9;
	FlaskOfRelentlessAssault = 10;
	FlaskOfSupremePower = 11;
	FlaskOfFortification = 12;
	FlaskOfChromaticWonder = 13;
}

enum BattleElixir {
	BattleElixirUnknown = 0;
	ElixirOfAccuracy = 1;
	ElixirOfArmorPiercing = 2;
	ElixirOfDeadlyStrikes = 3;
	ElixirOfExpertise = 4;
	ElixirOfLightningSpeed = 5;
	ElixirOfMightyAgility = 6;
	ElixirOfMightyStrength = 7;
	GurusElixir = 8;
	SpellpowerElixir = 9;
	WrathElixir = 10;

	// TBC
	AdeptsElixir = 11;
	ElixirOfDemonslaying = 12;
	ElixirOfMajorAgility = 13;
	ElixirOfMajorFirePower = 14;
	ElixirOfMajorFrostPower = 15;
	ElixirOfMajorShadowPower = 16;
	ElixirOfMajorStrength = 17;
	ElixirOfMastery = 18;
	ElixirOfTheMongoose = 19;
	FelStrengthElixir = 20;
	GreaterArcaneElixir = 21;
}

enum GuardianElixir {
	GuardianElixirUnknown = 0;
	ElixirOfMightyDefense = 1;
	ElixirOfMightyFortitude = 2;
	ElixirOfMightyMageblood = 3;
	ElixirOfMightyThoughts = 4;
	ElixirOfProtection = 5;
	ElixirOfSpirit = 6;

	// TBC
	GiftOfArthas = 7;
	ElixirOfDraenicWisdom = 8;
	ElixirOfIronskin = 9;
	ElixirOfMajorDefense = 10;
	ElixirOfMajorFortitude = 11;
	ElixirOfMajorMageblood = 12;
}

enum Food {
	FoodUnknown = 0;
	FoodFishFeast = 1;
	FoodGreatFeast = 2;
	FoodBlackenedDragonfin = 3;
	FoodHeartyRhino = 4;
	FoodMegaMammothMeal = 5;
	FoodSpicedWormBurger = 6;
	FoodRhinoliciousWormsteak = 7;
	FoodImperialMantaSteak = 8;
	FoodSnapperExtreme = 9;
	FoodMightyRhinoDogs = 10;
	FoodFirecrackerSalmon = 11;
	FoodCuttlesteak = 12;
	FoodDragonfinFilet = 13;

	// TBC Foods
	FoodBlackenedBasilisk = 14;
	FoodGrilledMudfish = 15;
	FoodRavagerDog = 16;
	FoodRoastedClefthoof = 17;
	FoodSkullfishSoup = 18;
	FoodSpicyHotTalbuk = 19;
	FoodFishermansFeast = 20;
}

enum PetFood {
	PetFoodUnknown = 0;
	PetFoodSpicedMammothTreats = 1;
	// TBC
	PetFoodKiblersBits = 2;
}

// Buffs that affect the entire raid.
message RaidBuffs {
	// +Stats
	TristateEffect gift_of_the_wild = 1;

	// +Stam
	TristateEffect power_word_fortitude = 2;

	// +Health
	TristateEffect commanding_shout = 3;
	TristateEffect blood_pact = 4;	

	// + Agi and Str
	bool horn_of_winter = 5;
	TristateEffect strength_of_earth_totem = 6; // none, normal, 15% improved
	
	// +Intell and/or Spi
	bool arcane_brilliance = 7;
	TristateEffect fel_intelligence = 8;
	bool divine_spirit = 9;

	// +AP
	TristateEffect battle_shout = 10;
	
	// 10% AP
	bool trueshot_aura = 11;
	bool unleashed_rage = 12;
	bool abominations_might = 13;

	// 5% phy crit
	TristateEffect leader_of_the_pack = 14;
	bool rampage = 15;

	// 20% Melee Haste
	bool icy_talons = 16;
	TristateEffect windfury_totem = 17; // none, 16%, 20%

	// +Spell Power
	bool totem_of_wrath = 18; // shouldn't stack with demonic pact (does in beta right now)
	bool flametongue_totem = 19;
	int32 demonic_pact = 20; // SP buff, variable : 10% of demonology warlock's own SP

	// +5% Spell Crit and/or +3% Haste
	bool swift_retribution = 21; //haste only
	TristateEffect moonkin_aura = 22; //both crit and haste
	bool elemental_oath = 23; //crit only

	// 5% spell haste
	bool wrath_of_air_totem = 24;

	// 3% dmg
	bool ferocious_inspiration = 25;
	bool sanctified_retribution = 26;
	bool arcane_empowerment = 27;

	// mp5
	TristateEffect mana_spring_totem = 28;
	
	// Miscellaneous
	bool bloodlust = 29;
	TristateEffect thorns = 30;
	TristateEffect devotion_aura = 31;
	TristateEffect stoneskin_totem = 42;
	bool retribution_aura = 32;
	bool shadow_protection = 33;	

	// Drums
	bool drums_of_forgotten_kings = 34;
	bool drums_of_the_wild = 35;

	// Scroll
	bool scroll_of_protection = 36;
	bool scroll_of_stamina = 37;
	bool scroll_of_strength = 38;
	bool scroll_of_agility = 39;
	bool scroll_of_intellect = 40;
	bool scroll_of_spirit = 41;
}

// Buffs that affect a single party.
message PartyBuffs {
	// Item Buffs
	int32 atiesh_mage = 1;
	int32 atiesh_warlock = 2;

	bool braided_eternium_chain = 3;
	bool eye_of_the_night = 4;
	bool chain_of_the_twilight_owl = 5;
	
	// Group buffs
	int32 mana_tide_totems = 6;
	bool heroic_presence = 7;
}

// These are usually individual actions taken by other Characters.
message IndividualBuffs {
	// 10% Stats
	bool blessing_of_kings = 1;
	TristateEffect blessing_of_wisdom = 2;
	TristateEffect blessing_of_might = 3;
	bool blessing_of_sanctuary = 4;
	bool vigilance = 5;
	bool renewed_hope = 6;

	// Only used in individual sims 
	//   as the class that provides these would cast them in raid sim

	// How many of each of these buffs the player will be receiving.
	int32 hymn_of_hope = 7;
	int32 hand_of_salvation = 8;
	int32 rapture = 9;
	int32 innervates = 10;
	int32 power_infusions = 11;
	int32 unholy_frenzy = 12;
	int32 revitalize = 13;
	int32 tricks_of_the_trades = 19;

	bool vampiric_touch = 14;
	bool hunting_party = 15;
	bool judgements_of_the_wise = 16;
	bool improved_soul_leech = 17;
	bool enduring_winter = 18;
}

message Consumes {
	Flask flask = 1;
	BattleElixir battle_elixir = 2;
	GuardianElixir guardian_elixir = 3;

	WeaponImbue main_hand_imbue = 4;
	WeaponImbue off_hand_imbue = 5;

	Food food = 6;
	PetFood pet_food = 7;

	int32 pet_scroll_of_agility = 8;
	int32 pet_scroll_of_strength = 9;

	Potions default_potion = 10;
	Potions prepop_potion = 11;

	Conjured default_conjured = 12;
	Conjured starting_conjured = 13;
	int32 num_starting_conjured = 14;

	bool thermal_sapper = 15;
	bool explosive_decoy = 16;
	Explosive filler_explosive = 17;
}

message Debuffs {
	bool judgement_of_wisdom = 1;
	bool judgement_of_light = 2;

	bool misery = 3;
	TristateEffect faerie_fire = 4;

	// 13% bonus spell damage
	bool curse_of_elements = 5;
	bool ebon_plaguebringer = 6;
	bool earth_and_moon = 7;
	
	// +3% to crit against target
	bool heart_of_the_crusader = 8;
	bool master_poisoner = 9;
	bool totem_of_wrath = 10;

	// 5% spell crit
	bool shadow_mastery = 11;
	bool improved_scorch = 12;
	bool winters_chill = 13;

	bool blood_frenzy = 14;
	bool savage_combat = 15;

	// TODO: validate these
	bool gift_of_arthas = 16;
	
	// Bleed %
	bool mangle = 17;
	bool trauma = 18;
	bool stampede = 19;

	// Major armor
	bool expose_armor = 20;
	bool sunder_armor = 21;
	bool acid_spit = 22;

	TristateEffect curse_of_weakness = 23;
	bool sting = 24;

	TristateEffect demoralizing_roar = 25;
	TristateEffect demoralizing_shout = 26;
	TristateEffect thunder_clap = 27;
	TristateEffect frost_fever = 28;
	bool infected_wounds = 29;
	bool judgements_of_the_just = 30;

	bool insect_swarm = 31;
	bool scorpid_sting = 32;
	bool shadow_embrace = 33;
	bool screech = 34;

	// 1 = normal, 2 = talented, 3 = talented+glyphed
	int32 hunters_mark = 35;
}

enum MobType {
	MobTypeUnknown = 0;
	MobTypeBeast = 1;
	MobTypeDemon = 2;
	MobTypeDragonkin = 3;
	MobTypeElemental = 4;
	MobTypeGiant = 5;
	MobTypeHumanoid = 6;
	MobTypeMechanical = 7;
	MobTypeUndead = 8;
}

message Target {
	// The in-game NPC ID.
	int32 id = 14;
	string name = 15;

	int32 level = 4;
	MobType mob_type = 3;
	repeated double stats = 5;

	// Auto attack parameters.
	double min_base_damage = 7;
	double swing_speed = 8;
	bool dual_wield = 9;
	bool dual_wield_penalty = 10;
	bool parry_haste = 12;
	bool suppress_dodge = 16; // Sunwell Radiance
	SpellSchool spell_school = 13; // Allows elemental attacks.

	// Index in Raid.tanks indicating the player tanking this mob.
	// -1 or invalid index indicates not being tanked.
	int32 tank_index = 6;
}

message Encounter {
	double duration = 1;

	// Variation in the duration
	double duration_variation = 2;

	// The ratio of the encounter duration, between 0 and 1, for which the targets
	// will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten
	// Fury, etc.
	double execute_proportion_20 = 3;

	// Key for Affliction warlock Drain Soul
	double execute_proportion_25 = 7;

	// Same as execute_proportion but for 35%.
	double execute_proportion_35 = 4;

	// If set, will use the targets health value instead of a duration for fight length.
	bool use_health = 5;

	// If type != Simple or Custom, then this may be empty.
	repeated Target targets = 6;
}

message ItemSpec {
	int32 id = 2;
	int32 enchant = 3;
	repeated int32 gems = 4;
}

message EquipmentSpec {
	repeated ItemSpec items = 1;
}

message Item {
	int32 id = 1;
	// This is unused by most items. For most items we set id to the
	// wowhead/in-game ID directly. For random enchant items though we need to
	// use unique hardcoded IDs so this field holds the wowhead ID instead.
	int32 wowhead_id = 16;

	string name = 2;

	// Classes that are allowed to use the item. Empty indicates no special class restrictions.
	repeated Class class_allowlist = 15;

	ItemType type = 3;
	ArmorType armor_type = 4;
	WeaponType weapon_type = 5;
	HandType hand_type = 6;
	RangedWeaponType ranged_weapon_type = 7;

	repeated double stats = 8;
	repeated GemColor gem_sockets = 9;
	repeated double socketBonus = 10;

	// Weapon stats, needed for computing proper EP for melee weapons
	double weapon_damage_min = 17;
	double weapon_damage_max = 18;
	double weapon_speed = 19;

	int32 phase = 11;
	ItemQuality quality = 12;
	bool unique = 13;
	int32 ilvl = 20;
	Profession required_profession = 21;
	bool heroic = 22;
}

// Extra enum for describing which items are eligible for an enchant, when
// ItemType alone is not enough.
enum EnchantType {
	EnchantTypeNormal = 0;
	EnchantTypeTwoHand = 1;
	EnchantTypeShield = 2;
	EnchantTypeKit = 3;
}

message Enchant {
	int32 id = 1;        // ID of the enchant "item".
	int32 effect_id = 2; // ID of the effect (for the item tooltip UI)
	string name = 3;     

	// If true, then id is the ID of the enchant spell instead of the formula item.
	// This is used by enchants for which a formula doesn't exist (its taught by a trainer).
	bool is_spell_id = 10;

	ItemType type = 4;   // Which type of item this enchant can be applied to.
	EnchantType enchant_type = 9;

	repeated double stats = 7;

	ItemQuality quality = 8;
	int32 phase = 11;
	Profession required_profession = 13;

	// Classes that are allowed to use the enchant. Empty indicates no special class restrictions.
	repeated Class class_allowlist = 12;
}

message Gem {
	int32 id = 1;
	string name = 2;

	repeated double stats = 3;
	GemColor color = 4;

	int32 phase = 5;
	ItemQuality quality = 6;
	bool unique = 7;
	Profession required_profession = 8;
}

message RaidTarget {
	// Raid index of the player to target. A value of -1 indicates no target.
	int32 target_index = 1;
}

// ID for actions that aren't spells or items.
enum OtherAction {
	OtherActionNone = 0;
	OtherActionWait = 1;
	OtherActionManaRegen = 2;
	OtherActionEnergyRegen = 5;
	OtherActionFocusRegen = 6;
	OtherActionManaGain = 10; // For threat generated from mana gains.
	OtherActionRageGain = 11; // For threat generated from rage gains.
	OtherActionAttack = 3; // A white hit, can be main hand or off hand.
	OtherActionShoot = 4; // Default shoot action using a wand/bow/gun.
	OtherActionPet = 7; // Represents a grouping of all pet actions. Only used by the UI.
	OtherActionRefund = 8; // Refund of a resource like Energy or Rage, when the ability didn't land.
	OtherActionDamageTaken = 9; // Indicates damage taken; used for rage gen.
	OtherActionHealingModel = 12; // Indicates healing received from healing model.
	OtherActionBloodRuneGain = 13; // Indicates healing received from healing model.
	OtherActionFrostRuneGain  = 14; // Indicates healing received from healing model.
	OtherActionUnholyRuneGain  = 15; // Indicates healing received from healing model.
	OtherActionDeathRuneGain  = 16; // Indicates healing received from healing model.
}

message ActionID {
	// Identifies this action.
	oneof raw_id {
		int32 spell_id = 1;
		int32 item_id = 2;
		OtherAction other_id = 3;
	}

	// Distinguishes between different versions of the same action.
	// Currently the only use for this is Shaman Lightning Overload.
	int32 tag = 4;
}

message Glyphs {
	int32 major1 = 1;
	int32 major2 = 2;
	int32 major3 = 3;
	int32 minor1 = 4;
	int32 minor2 = 5;
	int32 minor3 = 6;
}

// Custom options for a particular cooldown.
message Cooldown {
	// Identifies the cooldown to which these settings will apply.
	ActionID id = 1;

	// Fixed times at which to use this cooldown. Each value corresponds to a usage,
	// e.g. first value is the first usage, second value is the second usage.
	// Any usages after the specified timings will occur as soon as possible, subject
	// to the ShouldActivate() condition.
	repeated double timings = 2;
}

message Cooldowns {
	repeated Cooldown cooldowns = 1;

	// % HP threshold, below which defensive cooldowns can be used.
	double hp_percent_for_defensives = 2;
}

message HealingModel {
	// Healing per second to apply.
	double hps = 1;

	// How often healing is applied.
	double cadence_seconds = 2;
}
