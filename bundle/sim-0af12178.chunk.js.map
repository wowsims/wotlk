{"version":3,"file":"sim-0af12178.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { APLRotation_Type } from '../core/proto/apl.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tFeralDruid_Rotation_AplType as AplType,\n\tFeralDruid_Rotation_BiteModeType as BiteModeType,\n} from '../core/proto/druid.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecFeralDruid>({\n\tfieldName: 'innervateTarget',\n\tid: ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecFeralDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecFeralDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\n\tfieldName: 'latencyMs',\n\tlabel: 'Latency',\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\n});\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: 'Assume bleed always exists for \\'Rend and Tear\\' calculations. Otherwise will only calculate based on own rip/rake/lacerate.',\n\textraCssClasses: ['within-raid-sim-hide'],\n})\n\nfunction ShouldShowAdvParamST(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getSimpleRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.SingleTarget;\n}\n\nfunction ShouldShowAdvParamAoe(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getSimpleRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.Aoe;\n}\n\nexport const FeralDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, AplType>({\n\t\t\tfieldName: 'rotationType',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: AplType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: AplType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'prePopOoc',\n\t\t\tlabel: 'Pre-pop Clearcasting',\n\t\t\tlabelTooltip: 'Start fight with clearcasting',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().omenOfClarity,\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'prePopBerserk',\n\t\t\tlabel: 'Pre-pop Berserk',\n\t\t\tlabelTooltip: 'Pre pop berserk 1 sec before fight',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().berserk,\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'manualParams',\n\t\t\tlabel: 'Manual Advanced Parameters',\n\t\t\tlabelTooltip: 'Manually specify advanced parameters, otherwise will use preset defaults',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maxFfDelay',\n\t\t\tlabel: 'Max FF Delay',\n\t\t\tlabelTooltip: 'Max allowed delay to wait for ff to come off CD in seconds',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getSimpleRotation().manualParams,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'minRoarOffset',\n\t\t\tlabel: 'Roar Offset',\n\t\t\tlabelTooltip: 'Targeted offset in Rip/Roar timings',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'ripLeeway',\n\t\t\tlabel: 'Rip Leeway',\n\t\t\tlabelTooltip: 'Rip leeway when determining roar clips',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useRake',\n\t\t\tlabel: 'Use Rake',\n\t\t\tlabelTooltip: 'Use rake during rotation',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useBite',\n\t\t\tlabel: 'Bite during rotation',\n\t\t\tlabelTooltip: 'Use bite during rotation rather than just at end',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'biteTime',\n\t\t\tlabel: 'Bite Time',\n\t\t\tlabelTooltip: 'Min seconds on Rip/Roar to bite',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) =>\n\t\t\t\tShouldShowAdvParamST(player) && player.getSimpleRotation().useBite == true && player.getSimpleRotation().biteModeType == BiteModeType.Emperical,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'flowerWeave',\n\t\t\tlabel: 'Flower Weave',\n\t\t\tlabelTooltip: 'Fish for clearcasting during rotation with gotw',\n\t\t\tshowWhen: ShouldShowAdvParamAoe,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\textraCssClasses: ['used-in-apl'],\n\t\t\tfieldName: 'raidTargets',\n\t\t\tlabel: 'GotW Raid Targets',\n\t\t\tlabelTooltip: 'Raid size to assume for clearcast proc chance (can include pets as well, so 25 man raid potentically can be ~30)',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.aplRotation.type != APLRotation_Type.TypeSimple || (ShouldShowAdvParamAoe(player) && player.getSimpleRotation().flowerWeave == true),\n\t\t}),\n\t\t// Can be uncommented if/when analytical bite mode is added\n\t\t//InputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, BiteModeType>({\n\t\t//\tfieldName: 'biteModeType',\n\t\t//\tlabel: 'Bite Mode',\n\t\t//\tlabelTooltip: 'Underlying \"Bite logic\" to use',\n\t\t//\tvalues: [\n\t\t//\t\t{ name: 'Emperical', value: BiteModeType.Emperical },\n\t\t//\t],\n\t\t//\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getSimpleRotation().useBite == true\n\t\t//}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'hotUptime',\n\t\t\tlabel: 'Revitalize Hot Uptime',\n\t\t\tlabelTooltip: 'Hot uptime percentage to assume when theorizing energy gains',\n\t\t\tpercent: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getSimpleRotation().useBite == true && player.getSimpleRotation().biteModeType == BiteModeType.Analytical,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFood,\n\tPotions,\n\tFlask,\n\tGlyphs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralDruid_Options as FeralDruidOptions,\n\tDruidMajorGlyph,\n\tDruidMinorGlyph,\n\tFeralDruid_Rotation_BearweaveType,\n\tFeralDruid_Rotation_BiteModeType,\n\tFeralDruid_Rotation_AplType,\n} from '../core/proto/druid.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nimport P1Gear from './gear_sets/p1.gear.json';\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nimport P2Gear from './gear_sets/p2.gear.json';\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nimport P3Gear from './gear_sets/p3.gear.json';\nexport const P3_PRESET = PresetUtils.makePresetGear('P3 Preset', P3Gear);\nimport P4Gear from './gear_sets/p4.gear.json';\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\nimport DefaultApl from './apls/default.apl.json';\nexport const APL_ROTATION_DEFAULT = PresetUtils.makePresetAPLRotation('APL Default', DefaultApl);\n\nimport CustomExampleApl from './apls/custom_apl_example.apl.json';\nexport const APL_ROTATION_CUSTOM_EXAMPLE = PresetUtils.makePresetAPLRotation('Custom APL Example', CustomExampleApl);\n\nexport const DefaultRotation = FeralDruidRotation.create({\n\trotationType: FeralDruid_Rotation_AplType.SingleTarget,\n\n\tbearWeaveType: FeralDruid_Rotation_BearweaveType.None,\n\tminCombosForRip: 5,\n\tminCombosForBite: 5,\n\n\tuseRake: true,\n\tuseBite: true,\n\tmangleSpam: false,\n\tbiteModeType: FeralDruid_Rotation_BiteModeType.Emperical,\n\tbiteTime: 4.0,\n\tberserkBiteThresh: 25.0,\n\tberserkFfThresh: 15.0,\n\tpowerbear: false,\n\tminRoarOffset: 12.0,\n\tripLeeway: 3.0,\n\tmaintainFaerieFire: true,\n\thotUptime: 0.0,\n\tsnekWeave: false,\n\tflowerWeave: false,\n\traidTargets: 30,\n\tmaxFfDelay: 0.1,\n\tprePopOoc: true,\n});\n\nexport const SIMPLE_ROTATION_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecFeralDruid, DefaultRotation);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-543202132322010053120030310511-203503012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfOmenOfClarity,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfSavageRoar,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfShred,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfDash,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfTheWild,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = FeralDruidOptions.create({\n\tlatencyMs: 100,\n\tassumeBleedActive: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n});\n","import {\n\tClass,\n\tCooldowns,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { PhysicalDPSGemOptimizer } from '../core/components/suggest_gems_action.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tFeralDruid_Rotation as DruidRotation,\n} from '../core/proto/druid.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as AplUtils from '../core/proto_utils/apl_utils.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport {\n\tAPLAction,\n\tAPLPrepullAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecFeralDruid, {\n\tcssClass: 'feral-druid-sim-ui',\n\tcssScheme: 'druid',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatMana,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P4_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 2.40,\n\t\t\t[Stat.StatAgility]: 2.39,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatMeleeHit]: 2.51,\n\t\t\t[Stat.StatMeleeCrit]: 2.23,\n\t\t\t[Stat.StatMeleeHaste]: 1.83,\n\t\t\t[Stat.StatArmorPenetration]: 2.08,\n\t\t\t[Stat.StatExpertise]: 2.44,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 16.5,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tbloodlust: true,\n\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\tunleashedRage: true,\n\t\t\ticyTalons: true,\n\t\t\tswiftRetribution: true,\n\t\t\tsanctifiedRetribution: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t\theroicPresence: true,\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tjudgementOfWisdom: true,\n\t\t\tbloodFrenzy: true,\n\t\t\tgiftOfArthas: true,\n\t\t\texposeArmor: true,\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tsunderArmor: true,\n\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\theartOfTheCrusader: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: DruidInputs.FeralDruidRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.IntellectBuff,\n\t\tBuffDebuffInputs.MP5Buff,\n\t\tBuffDebuffInputs.JudgementOfWisdom,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tDruidInputs.LatencyMs,\n\t\t\tDruidInputs.AssumeBleedActive,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.StandardTalents,\n\t\t],\n\t\trotations: [\n\t\t\tPresets.SIMPLE_ROTATION_DEFAULT,\n\t\t\tPresets.APL_ROTATION_DEFAULT,\n\t\t\tPresets.APL_ROTATION_CUSTOM_EXAMPLE,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET,\n\t\t\tPresets.P3_PRESET,\n\t\t\tPresets.P4_PRESET,\n\t\t],\n\t},\n\t\n\tautoRotation: (_player: Player<Spec.SpecFeralDruid>): APLRotation => {\n\t\treturn Presets.APL_ROTATION_DEFAULT.rotation.rotation!;\n\t},\n\n\tsimpleRotation: (player: Player<Spec.SpecFeralDruid>, simple: DruidRotation, cooldowns: Cooldowns): APLRotation => {\n\t\tlet [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst preOmen = APLPrepullAction.fromJsonString(`{\"action\":{\"activateAura\":{\"auraId\":{\"spellId\":16870}}},\"doAtValue\":{\"const\":{\"val\":\"-1s\"}}}`);\n\t\tconst preZerk = APLPrepullAction.fromJsonString(`{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":50334}}},\"doAtValue\":{\"const\":{\"val\":\"-1s\"}}}`);\n\t\tconst blockZerk = APLAction.fromJsonString(`{\"condition\":{\"const\":{\"val\":\"false\"}},\"castSpell\":{\"spellId\":{\"spellId\":50334}}}`);\n\t\tconst doRotation = APLAction.fromJsonString(`{\"catOptimalRotationAction\":{\"rotationType\":${simple.rotationType},\"manualParams\":${simple.manualParams},\"maxFfDelay\":${simple.maxFfDelay.toFixed(2)},\"minRoarOffset\":${simple.minRoarOffset.toFixed(2)},\"ripLeeway\":${simple.ripLeeway.toFixed(0)},\"useRake\":${simple.useRake},\"useBite\":${simple.useBite},\"biteTime\":${simple.biteTime.toFixed(2)},\"flowerWeave\":${simple.flowerWeave}}}`);\n\n\t\tprepullActions.push(...[\n\t\t\tsimple.prePopOoc ? preOmen: null,\n\t\t\tsimple.prePopBerserk ? preZerk: null,\n\t\t].filter(a => a) as Array<APLPrepullAction>)\n\n\t\tactions.push(...[\n\t\t\tblockZerk,\n\t\t\tdoRotation,\n\t\t].filter(a => a) as Array<APLAction>)\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action => APLListItem.create({\n\t\t\t\taction: action,\n\t\t\t}))\n\t\t});\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecFeralDruid,\n\t\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\t\tdefaultName: 'Cat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 3),\n\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\n\t\tconst _gemOptimizer = new FeralGemOptimizer(this);\n\t}\n}\n\nclass FeralGemOptimizer extends PhysicalDPSGemOptimizer {\n\tconstructor(simUI: IndividualSimUI<Spec.SpecFeralDruid>) {\n\t\tsuper(simUI, true, true, true, true);\n\t}\n\n\tcalcCritCap(gear: Gear): Stats {\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\n\t\tlet agiProcs = 0;\n\n\t\tif (gear.hasRelic(47668)) {\n\t\t\tagiProcs += 200;\n\t\t}\n\n\t\tif (gear.hasRelic(50456)) {\n\t\t\tagiProcs += 44*5;\n\t\t}\n\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\n\t\t\tagiProcs += 510;\n\t\t}\n\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\n\t\t\tagiProcs += 450;\n\t\t}\n\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\n\t\t\tagiProcs += 300;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\n\t}\n}\n"],"names":["InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","LatencyMs","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","AssumeBleedActive","InputHelpers.makeSpecOptionsBooleanInput","ShouldShowAdvParamST","rot","getSimpleRotation","manualParams","rotationType","AplType","SingleTarget","ShouldShowAdvParamAoe","Aoe","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","InputHelpers.makeRotationBooleanInput","showWhen","getTalents","omenOfClarity","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","berserk","InputHelpers.makeRotationNumberInput","float","positive","useBite","biteModeType","BiteModeType","Emperical","aplRotation","APLRotation_Type","TypeSimple","flowerWeave","percent","Analytical","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET","P3Gear","P4_PRESET","P4Gear","APL_ROTATION_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","APL_ROTATION_CUSTOM_EXAMPLE","CustomExampleApl","DefaultRotation","FeralDruidRotation","FeralDruid_Rotation_AplType","bearWeaveType","FeralDruid_Rotation_BearweaveType","None","minCombosForRip","minCombosForBite","useRake","mangleSpam","FeralDruid_Rotation_BiteModeType","biteTime","berserkBiteThresh","berserkFfThresh","powerbear","minRoarOffset","ripLeeway","maintainFaerieFire","hotUptime","snekWeave","raidTargets","maxFfDelay","prePopOoc","SIMPLE_ROTATION_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecFeralDruid","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfOmenOfClarity","major2","GlyphOfSavageRoar","major3","GlyphOfShred","minor1","DruidMinorGlyph","GlyphOfDash","minor2","GlyphOfTheWild","minor3","GlyphOfUnburdenedRebirth","DefaultOptions","FeralDruidOptions","latencyMs","assumeBleedActive","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatHealth","StatMana","defaults","gear","Presets.P4_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","manaSpringTotem","TristateEffectRegular","strengthOfEarthTotem","battleShout","unleashedRage","icyTalons","swiftRetribution","sanctifiedRetribution","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","judgementOfWisdom","bloodFrenzy","giftOfArthas","exposeArmor","faerieFire","sunderArmor","curseOfWeakness","heartOfTheCrusader","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","BuffDebuffInputs.IntellectBuff","BuffDebuffInputs.MP5Buff","BuffDebuffInputs.JudgementOfWisdom","excludeBuffDebuffInputs","otherInputs","DruidInputs.LatencyMs","DruidInputs.AssumeBleedActive","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.SIMPLE_ROTATION_DEFAULT","Presets.APL_ROTATION_DEFAULT","Presets.APL_ROTATION_CUSTOM_EXAMPLE","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET","Presets.P3_PRESET","autoRotation","_player","rotation","simpleRotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","preOmen","APLPrepullAction","fromJsonString","preZerk","blockZerk","APLAction","doRotation","toFixed","push","prePopBerserk","filter","a","APLRotation","priorityList","map","action","APLListItem","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","defaultFactionRaces","Faction","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","FeralGemOptimizer","this","PhysicalDPSGemOptimizer","simUI","calcCritCap","agiProcs","hasRelic","hasTrinket","withStat"],"mappings":"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"}