{"version":3,"file":"sim-284163a3.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts","../../../ui/core/components/fire_elemental_inputs.ts"],"sourcesContent":["import {\n\tShamanShield,\n\tShamanImbue,\n\tShamanSyncType,\n} from '../core/proto/shaman.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ShamanImbueMH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueMh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Main Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const ShamanImbueOH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueOh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Off Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman, ShamanSyncType>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n\tRaidBuffs,\n\tTristateEffect,\n\tDebuffs,\n\tFaction,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n\tShamanImbue,\n\tShamanShield,\n\tShamanSyncType,\n\tShamanMajorGlyph,\n\tEnhancementShaman_Options as EnhancementShamanOptions,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nimport P1Gear from './gear_sets/p1.gear.json';\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nimport P2FtGear from './gear_sets/p2_ft.gear.json';\nexport const P2_PRESET_FT = PresetUtils.makePresetGear('P2 Preset FT', P2FtGear);\nimport P2WfGear from './gear_sets/p2_wf.gear.json';\nexport const P2_PRESET_WF = PresetUtils.makePresetGear('P2 Preset WF', P2WfGear);\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nexport const P3_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nimport P4FtGear from './gear_sets/p4_ft.gear.json';\nexport const P4_PRESET_FT = PresetUtils.makePresetGear('P4 Preset FT', P4FtGear);\nimport P4WfGear from './gear_sets/p4_wf.gear.json';\nexport const P4_PRESET_WF = PresetUtils.makePresetGear('P4 Preset WF', P4WfGear);\n\nimport DefaultFt from './apls/default_ft.apl.json';\nexport const ROTATION_FT_DEFAULT = PresetUtils.makePresetAPLRotation('Default FT', DefaultFt);\nimport DefaultWf from './apls/default_wf.apl.json';\nexport const ROTATION_WF_DEFAULT = PresetUtils.makePresetAPLRotation('Default WF', DefaultWf);\nimport Phase3Apl from './apls/phase_3.apl.json';\nexport const ROTATION_PHASE_3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3Apl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30405003105021333031131031051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30505003105001333031131131051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\timbueMh: ShamanImbue.WindfuryWeapon,\n\timbueOh: ShamanImbue.FlametongueWeapon,\n\tsyncType: ShamanSyncType.Auto,\n\ttotems: ShamanTotems.create({\n\t\tearth: \tEarthTotem.StrengthOfEarthTotem,\n\t\tfire: \tFireTotem.MagmaTotem,\n\t\twater: \tWaterTotem.ManaSpringTotem,\n\t\tair: \tAirTotem.WindfuryTotem,\n\t})\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ttotemOfWrath: true,\n\twrathOfAirTotem: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tdivineSpirit: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdemonicPactSp: 500,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tsunderArmor: true,\n\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\tcurseOfElements: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tjudgementOfWisdom: true,\n\tmisery: true,\n\ttotemOfWrath: true,\n\tshadowMastery: true,\n});\n","import {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { ShamanImbue } from '../core/proto/shaman.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\n\nimport * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { FireElementalSection } from '../core/components/fire_elemental_inputs.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P4_PRESET_WF.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 1.48,\n\t\t\t[Stat.StatAgility]: 1.59,\n\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t[Stat.StatSpellPower]: 1.13,\n\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t[Stat.StatSpellCrit]: 0.91,\n\t\t\t[Stat.StatSpellHaste]: 0.37,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 1.38,\n\t\t\t[Stat.StatMeleeCrit]: 0.81,\n\t\t\t[Stat.StatMeleeHaste]: 1.61, //haste is complicated\n\t\t\t[Stat.StatArmorPenetration]: 0.48,\n\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 5.21,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.21,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\tjudgementsOfTheWise: true,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanInputs.ShamanShieldInput,\n\t\tShamanInputs.ShamanImbueMH,\n\t\tShamanInputs.ShamanImbueOH,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.ReplenishmentBuff,\n\t\tBuffDebuffInputs.MP5Buff,\n\t\tBuffDebuffInputs.SpellHasteBuff,\n\t\tBuffDebuffInputs.SpiritBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tShamanInputs.SyncTypeInput,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tcustomSections: [\n\t\tTotemsSection,\n\t\tFireElementalSection\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.StandardTalents,\n\t\t\tPresets.Phase3Talents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_FT_DEFAULT,\n\t\t\tPresets.ROTATION_WF_DEFAULT,\n\t\t\tPresets.ROTATION_PHASE_3,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET_FT,\n\t\t\tPresets.P2_PRESET_WF,\n\t\t\tPresets.P3_PRESET_ALLIANCE,\n\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\tPresets.P4_PRESET_FT,\n\t\t\tPresets.P4_PRESET_WF,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecEnhancementShaman>): APLRotation => {\n\t\tconst hasT94P = player.getCurrentStats().sets.includes('Triumphant Nobundo\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Nobundo\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Triumphant Thrall\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Thrall\\'s Battlegear (4pc)');\n\t\tconst options = player.getSpecOptions();\n\n\t\tif (hasT94P) {\n\t\t\tconsole.log(\"has set\");\n\t\t\treturn Presets.ROTATION_PHASE_3.rotation.rotation!;\n\t\t} else if (options.imbueMh == ShamanImbue.FlametongueWeapon) {\n\t\t\treturn Presets.ROTATION_FT_DEFAULT.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_WF_DEFAULT.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecEnhancementShaman,\n\t\t\ttooltip: specNames[Spec.SpecEnhancementShaman],\n\t\t\tdefaultName: 'Enhancement',\n\t\t\ticonUrl: getSpecIcon(Class.ClassShaman, 1),\n\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ALLIANCE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n","import { IndividualSimUI } from \"../individual_sim_ui\";\nimport { Player } from \"../player\";\nimport { ShamanTotems } from \"../proto/shaman\";\nimport { ShamanSpecs } from \"../proto_utils/utils\";\nimport { EventID } from \"../typed_event\";\nimport { ContentBlock } from \"./content_block\";\nimport { IconPicker } from \"./icon_picker\";\nimport * as InputHelpers from '../components/input_helpers.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { Input } from \"./input\";\nimport { NumberPicker } from \"./number_picker\";\nimport { BooleanPicker } from \"./boolean_picker\";\n\nexport function FireElementalSection(parentElem: HTMLElement, simUI: IndividualSimUI<ShamanSpecs>): ContentBlock {\n\tlet contentBlock = new ContentBlock(parentElem, 'fire-elemental-settings', {\n\t\theader: { title: 'Fire Elemental' }\n\t});\n\n\tlet fireElementalIconContainer = Input.newGroupContainer();\n\tfireElementalIconContainer.classList.add('fire-elemental-icon-container');\n\n\tcontentBlock.bodyElement.appendChild(fireElementalIconContainer);\n\n\tconst fireElementalBooleanIconInput = InputHelpers.makeBooleanIconInput<ShamanSpecs, ShamanTotems, Player<ShamanSpecs>>({\n\t\tgetModObject: (player: Player<ShamanSpecs>) => player,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems || ShamanTotems.create(),\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: ShamanTotems) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\t\t\tnewOptions.totems = newVal;\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\n\t\t\t// Hacky fix ItemSwapping is in the Rotation proto, this will let the Rotation know to update showWhen\n\t\t\t// TODO move the ItemSwap enabled to a spec option and have the ItemSwap proto be apart of player.\n\t\t\tplayer.rotationChangeEmitter.emit(eventID)\n\t\t},\n\t\tchangeEmitter: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t}, ActionId.fromSpellId(2894), \"useFireElemental\");\n\n\tnew IconPicker(fireElementalIconContainer, simUI.player, fireElementalBooleanIconInput);\n\n\tnew NumberPicker(contentBlock.bodyElement, simUI.player, {\n\t\tpositive: true,\n\t\tlabel: \"Bonus spell power\",\n\t\tlabelTooltip: \"Bonus spell power to snapshot Fire Elemental with. Will prioritize dropping Fire Elemental if greater then 0\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.bonusSpellpower || 0,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: number) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.bonusSpellpower = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t})\n\n\tnew BooleanPicker(contentBlock.bodyElement, simUI.player, {\n\t\tlabel: \"Use Tier 10 (4pc)\",\n\t\tlabelTooltip: \"Will use Tier 10 (4pc) to snapshot Fire Elemental.\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.enhTierTenBonus || false,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: boolean) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.enhTierTenBonus = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.currentStatsEmitter,\n\t\tshowWhen: (player: Player<ShamanSpecs>) => {\n\t\t\tconst hasBonus = player.getCurrentStats().sets.includes('Frost Witch\\'s Battlegear (4pc)');\n\t\t\treturn hasBonus\n\t\t}\n\t})\n\n\n\treturn contentBlock;\n}"],"names":["ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","ShamanShield","NoShield","tooltip","actionId","ActionId","fromSpellId","WaterShield","LightningShield","ShamanImbueMH","ShamanImbue","NoImbue","WindfuryWeapon","FlametongueWeapon","text","FlametongueWeaponDownrank","FrostbrandWeapon","ShamanImbueOH","SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","label","labelTooltip","name","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET_FT","P2FtGear","P2_PRESET_WF","P2WfGear","P3_PRESET_ALLIANCE","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET_FT","P4FtGear","P4_PRESET_WF","P4WfGear","ROTATION_FT_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultFt","ROTATION_WF_DEFAULT","DefaultWf","ROTATION_PHASE_3","Phase3Apl","StandardTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfFireNova","major2","GlyphOfFlametongueWeapon","major3","GlyphOfFeralSpirit","Phase3Talents","DefaultOptions","EnhancementShamanOptions","shield","imbueMh","imbueOh","syncType","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","fire","FireTotem","MagmaTotem","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","arcaneBrilliance","leaderOfThePack","totemOfWrath","wrathOfAirTotem","moonkinAura","sanctifiedRetribution","divineSpirit","battleShout","demonicPactSp","DefaultDebuffs","Debuffs","bloodFrenzy","sunderArmor","curseOfWeakness","TristateEffectRegular","curseOfElements","faerieFire","judgementOfWisdom","misery","shadowMastery","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P4_PRESET_WF","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","judgementsOfTheWise","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.ShamanImbueMH","ShamanInputs.ShamanImbueOH","includeBuffDebuffInputs","BuffDebuffInputs.ReplenishmentBuff","BuffDebuffInputs.MP5Buff","BuffDebuffInputs.SpellHasteBuff","BuffDebuffInputs.SpiritBuff","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","otherInputs","inputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","customSections","TotemsSection","parentElem","simUI","contentBlock","ContentBlock","header","title","fireElementalIconContainer","Input","newGroupContainer","classList","add","bodyElement","appendChild","fireElementalBooleanIconInput","InputHelpers.makeBooleanIconInput","getModObject","player","getValue","getSpecOptions","setValue","eventID","newVal","newOptions","setSpecOptions","rotationChangeEmitter","emit","changeEmitter","specOptionsChangeEmitter","IconPicker","NumberPicker","positive","inline","bonusSpellpower","changedEvent","BooleanPicker","enhTierTenBonus","currentStatsEmitter","showWhen","getCurrentStats","sets","includes","encounterPicker","showExecuteProportion","presets","Presets.Phase3Talents","rotations","Presets.ROTATION_FT_DEFAULT","Presets.ROTATION_WF_DEFAULT","Presets.ROTATION_PHASE_3","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET_FT","Presets.P2_PRESET_WF","Presets.P3_PRESET_ALLIANCE","Presets.P3_PRESET_HORDE","Presets.P4_PRESET_FT","autoRotation","hasT94P","options","console","log","rotation","raidSimPresets","spec","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassShaman","defaultFactionRaces","Unknown","Race","RaceUnknown","RaceDraenei","RaceOrc","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","super"],"mappings":"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"}