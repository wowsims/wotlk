{"version":3,"file":"sim-0e6f82bc.chunk.js","sources":["../../../ui/healing_priest/inputs.ts","../../../ui/healing_priest/presets.ts","../../../ui/healing_priest/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfPowerInfusion = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecHealingPriest>({\n\tfieldName: 'powerInfusionTarget',\n\tid: ActionId.fromSpellId(10060),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecHealingPriest>) => player.getSpecOptions().powerInfusionTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecHealingPriest>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const InnerFire = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecHealingPriest>({\n\tfieldName: 'useInnerFire',\n\tid: ActionId.fromSpellId(48168),\n});\n\nexport const Shadowfiend = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecHealingPriest>({\n\tfieldName: 'useShadowfiend',\n\tid: ActionId.fromSpellId(34433),\n});\n\nexport const RapturesPerMinute = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHealingPriest>({\n\tfieldName: 'rapturesPerMinute',\n\tlabel: 'Raptures / Min',\n\tlabelTooltip: 'Number of times to proc Rapture each minute (due to a PWS being fully absorbed).',\n\tshowWhen: (player: Player<Spec.SpecHealingPriest>) => player.getTalents().rapture > 0,\n\tchangeEmitter: (player: Player<Spec.SpecHealingPriest>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n","import {\n\tConsumes,\n\tDebuffs,\n\tIndividualBuffs,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n\tRaidBuffs,\n\tTristateEffect,\n\tUnitReference,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tHealingPriest_Options as Options,\n\tPriestMajorGlyph as MajorGlyph,\n\tPriestMinorGlyph as MinorGlyph,\n} from '../core/proto/priest.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidDiscGear from './gear_sets/preraid_disc.gear.json';\nimport PreraidHolyGear from './gear_sets/preraid_holy.gear.json';\nexport const DISC_PRERAID_PRESET = PresetUtils.makePresetGear('Disc Preraid Preset', PreraidDiscGear, { talentTree: 0 });\nexport const HOLY_PRERAID_PRESET = PresetUtils.makePresetGear('Holy Preraid Preset', PreraidHolyGear, { talentTree: 1 });\nimport P1DiscGear from './gear_sets/p1_disc.gear.json';\nimport P1HolyGear from './gear_sets/p1_holy.gear.json';\nexport const DISC_P1_PRESET = PresetUtils.makePresetGear('Disc P1 Preset', P1DiscGear, { talentTree: 0 });\nexport const HOLY_P1_PRESET = PresetUtils.makePresetGear('Holy P1 Preset', P1HolyGear, { talentTree: 1 });\nimport P2DiscGear from './gear_sets/p2_disc.gear.json';\nimport P2HolyGear from './gear_sets/p2_holy.gear.json';\nexport const DISC_P2_PRESET = PresetUtils.makePresetGear('Disc P2 Preset', P2DiscGear, { talentTree: 0 });\nexport const HOLY_P2_PRESET = PresetUtils.makePresetGear('Holy P2 Preset', P2HolyGear, { talentTree: 1 });\nimport P3DiscGear from './gear_sets/p3_disc.gear.json';\nimport P3HolyGear from './gear_sets/p3_holy.gear.json';\nexport const DISC_P3_PRESET = PresetUtils.makePresetGear('Disc P3 Preset', P3DiscGear, { talentTree: 0 });\nexport const HOLY_P3_PRESET = PresetUtils.makePresetGear('Holy P3 Preset', P3HolyGear, { talentTree: 1 });\nimport P4DiscGear from './gear_sets/p4_disc.gear.json';\nimport P4HolyGear from './gear_sets/p4_holy.gear.json';\nexport const DISC_P4_PRESET = PresetUtils.makePresetGear('Disc P4 Preset', P4DiscGear, { talentTree: 0 });\nexport const HOLY_P4_PRESET = PresetUtils.makePresetGear('Holy P4 Preset', P4HolyGear, { talentTree: 1 });\n\nimport DiscApl from './apls/disc.apl.json';\nexport const ROTATION_PRESET_DISC = PresetUtils.makePresetAPLRotation('Disc', DiscApl);\nimport HolyApl from './apls/holy.apl.json';\nexport const ROTATION_PRESET_HOLY = PresetUtils.makePresetAPLRotation('Holy', HolyApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const DiscTalents = {\n\tname: 'Disc',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '0503203130300512301313231251-2351010303',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfPowerWordShield,\n\t\t\tmajor2: MajorGlyph.GlyphOfFlashHeal,\n\t\t\tmajor3: MajorGlyph.GlyphOfPenance,\n\t\t\tminor1: MinorGlyph.GlyphOfFortitude,\n\t\t\tminor2: MinorGlyph.GlyphOfShadowfiend,\n\t\t\tminor3: MinorGlyph.GlyphOfFading,\n\t\t}),\n\t}),\n};\nexport const HolyTalents = {\n\tname: 'Holy',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '05032031103-234051032002152530004311051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfPrayerOfHealing,\n\t\t\tmajor2: MajorGlyph.GlyphOfRenew,\n\t\t\tmajor3: MajorGlyph.GlyphOfCircleOfHealing,\n\t\t\tminor1: MinorGlyph.GlyphOfFortitude,\n\t\t\tminor2: MinorGlyph.GlyphOfShadowfiend,\n\t\t\tminor3: MinorGlyph.GlyphOfFading,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = Options.create({\n\tuseInnerFire: true,\n\tuseShadowfiend: true,\n\trapturesPerMinute: 5,\n\n\tpowerInfusionTarget: UnitReference.create(),\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tdefaultPotion: Potions.RunicManaInjector,\n\tprepopPotion: Potions.PotionOfWildMagic,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tdivineSpirit: true,\n\ttrueshotAura: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\ttotemOfWrath: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\twrathOfAirTotem: true,\n\tsanctifiedRetribution: true,\n\tbloodlust: true,\n\tdemonicPactSp: 500,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tvampiricTouch: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n});\n","import {\n\tClass,\n\tFaction,\n\tPartyBuffs,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\n\nimport * as HealingPriestInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecHealingPriest, {\n\tcssClass: 'healing-priest-sim-ui',\n\tcssScheme: 'priest',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t'Talents that apply to, \"friendly targets at or below 50% health\" are not implemented.',\n\t\t'Prayer of Mending always bounces the maximum number of times.',\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DISC_P1_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 2.73,\n\t\t\t[Stat.StatSpirit]: 1.63,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.75,\n\t\t\t[Stat.StatSpellHaste]: 0.28,\n\t\t\t[Stat.StatMP5]: 2.05,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DiscTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tHealingPriestInputs.SelfPowerInfusion,\n\t\tHealingPriestInputs.InnerFire,\n\t\tHealingPriestInputs.Shadowfiend,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tHealingPriestInputs.RapturesPerMinute,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.DiscTalents,\n\t\t\tPresets.HolyTalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_PRESET_DISC,\n\t\t\tPresets.ROTATION_PRESET_HOLY,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.DISC_PRERAID_PRESET,\n\t\t\tPresets.DISC_P1_PRESET,\n\t\t\tPresets.DISC_P2_PRESET,\n\t\t\tPresets.DISC_P3_PRESET,\n\t\t\tPresets.DISC_P4_PRESET,\n\t\t\tPresets.HOLY_PRERAID_PRESET,\n\t\t\tPresets.HOLY_P1_PRESET,\n\t\t\tPresets.HOLY_P2_PRESET,\n\t\t\tPresets.HOLY_P3_PRESET,\n\t\t\tPresets.HOLY_P4_PRESET,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecHealingPriest>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tif (talentTree == 0) {\n\t\t\treturn Presets.ROTATION_PRESET_DISC.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_PRESET_HOLY.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecHealingPriest,\n\t\t\ttooltip: 'Discipline Priest',\n\t\t\tdefaultName: 'Discipline',\n\t\t\ticonUrl: getSpecIcon(Class.ClassPriest, 0),\n\n\t\t\ttalents: Presets.DiscTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.DISC_P1_PRESET.gear,\n\t\t\t\t\t2: Presets.DISC_P2_PRESET.gear,\n\t\t\t\t\t3: Presets.DISC_P3_PRESET.gear,\n\t\t\t\t\t4: Presets.DISC_P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.DISC_P1_PRESET.gear,\n\t\t\t\t\t2: Presets.DISC_P2_PRESET.gear,\n\t\t\t\t\t3: Presets.DISC_P3_PRESET.gear,\n\t\t\t\t\t4: Presets.DISC_P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHealingPriest,\n\t\t\ttooltip: 'Holy Priest',\n\t\t\tdefaultName: 'Holy',\n\t\t\ticonUrl: getSpecIcon(Class.ClassPriest, 1),\n\n\t\t\ttalents: Presets.HolyTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.HOLY_P1_PRESET.gear,\n\t\t\t\t\t2: Presets.HOLY_P2_PRESET.gear,\n\t\t\t\t\t3: Presets.HOLY_P3_PRESET.gear,\n\t\t\t\t\t4: Presets.HOLY_P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.HOLY_P1_PRESET.gear,\n\t\t\t\t\t2: Presets.HOLY_P2_PRESET.gear,\n\t\t\t\t\t3: Presets.HOLY_P3_PRESET.gear,\n\t\t\t\t\t4: Presets.HOLY_P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class HealingPriestSimUI extends IndividualSimUI<Spec.SpecHealingPriest> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecHealingPriest>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SelfPowerInfusion","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","powerInfusionTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","InnerFire","Shadowfiend","RapturesPerMinute","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","showWhen","getTalents","rapture","changeEmitter","TypedEvent","onAny","specOptionsChangeEmitter","talentsChangeEmitter","DISC_PRERAID_PRESET","PresetUtils.makePresetGear","talentTree","HOLY_PRERAID_PRESET","PreraidHolyGear","DISC_P1_PRESET","P1DiscGear","HOLY_P1_PRESET","P1HolyGear","DISC_P2_PRESET","P2DiscGear","HOLY_P2_PRESET","P2HolyGear","DISC_P3_PRESET","P3DiscGear","HOLY_P3_PRESET","P3HolyGear","DISC_P4_PRESET","P4DiscGear","HOLY_P4_PRESET","P4HolyGear","ROTATION_PRESET_DISC","PresetUtils.makePresetAPLRotation","DiscApl","ROTATION_PRESET_HOLY","HolyApl","DiscTalents","name","data","SavedTalents","talentsString","glyphs","Glyphs","major1","MajorGlyph","GlyphOfPowerWordShield","major2","GlyphOfFlashHeal","major3","GlyphOfPenance","minor1","MinorGlyph","GlyphOfFortitude","minor2","GlyphOfShadowfiend","minor3","GlyphOfFading","HolyTalents","GlyphOfPrayerOfHealing","GlyphOfRenew","GlyphOfCircleOfHealing","DefaultOptions","Options","useInnerFire","useShadowfiend","rapturesPerMinute","DefaultConsumes","Consumes","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","defaultPotion","Potions","RunicManaInjector","prepopPotion","PotionOfWildMagic","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","strengthOfEarthTotem","arcaneBrilliance","divineSpirit","trueshotAura","leaderOfThePack","icyTalons","totemOfWrath","moonkinAura","wrathOfAirTotem","sanctifiedRetribution","bloodlust","demonicPactSp","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","DefaultDebuffs","Debuffs","SPEC_CONFIG","registerSpecConfig","Spec","SpecHealingPriest","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","gear","Presets.DISC_P1_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DiscTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","HealingPriestInputs.SelfPowerInfusion","HealingPriestInputs.InnerFire","HealingPriestInputs.Shadowfiend","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","HealingPriestInputs.RapturesPerMinute","encounterPicker","showExecuteProportion","presets","Presets.HolyTalents","rotations","Presets.ROTATION_PRESET_DISC","Presets.ROTATION_PRESET_HOLY","Presets.DISC_PRERAID_PRESET","Presets.DISC_P2_PRESET","Presets.DISC_P3_PRESET","Presets.DISC_P4_PRESET","Presets.HOLY_PRERAID_PRESET","Presets.HOLY_P1_PRESET","Presets.HOLY_P2_PRESET","Presets.HOLY_P3_PRESET","Presets.HOLY_P4_PRESET","autoRotation","getTalentTree","rotation","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassPriest","defaultFactionRaces","Faction","Race","RaceUnknown","Alliance","RaceDwarf","Horde","RaceUndead","defaultGear","HealingPriestSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}