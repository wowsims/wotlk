{"version":3,"file":"sim-965e6a1d.chunk.js","sources":["../../../ui/restoration_shaman/inputs.ts","../../../ui/restoration_shaman/presets.ts","../../../ui/restoration_shaman/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tShamanShield,\n} from '../core/proto/shaman.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRestorationShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const TriggerEarthShield = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRestorationShaman>({\n\tfieldName: 'earthShieldPPM',\n\tlabel: 'Earth Shield PPM',\n\tlabelTooltip: 'How many times Earth Shield should be triggered per minute.',\n\tshowWhen: (player: Player<Spec.SpecRestorationShaman>) => player.getTalents().earthShield,\n\tchangeEmitter: (player: Player<Spec.SpecRestorationShaman>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRestorationShaman_Options as RestorationShamanOptions,\n\tShamanShield,\n\tShamanMajorGlyph,\n\tShamanMinorGlyph,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('PreRaid', PreraidGear);\nimport P1Gear from './gear_sets/p1.gear.json';\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nimport P2Gear from './gear_sets/p2.gear.json';\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nimport P3Gear from './gear_sets/p3.gear.json';\nexport const P3_PRESET = PresetUtils.makePresetGear('P3 Preset', P3Gear);\nimport P4Gear from './gear_sets/p4.gear.json';\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const TankHealingTalents = {\n\tname: 'Tank Healing',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-30205033-05005331335010501122331251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfEarthlivingWeapon,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfEarthShield,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfLesserHealingWave,\n\t\t\tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t\tminor1: ShamanMinorGlyph.GlyphOfRenewedLife,\n\t\t\tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t}),\n\t}),\n};\nexport const RaidHealingTalents = {\n\tname: 'Raid Healing',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-3020503-50005331335310501122331251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfChainHeal,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfEarthShield,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfEarthlivingWeapon,\n\t\t\tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t\tminor1: ShamanMinorGlyph.GlyphOfRenewedLife,\n\t\t\tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = RestorationShamanOptions.create({\n\tshield: ShamanShield.WaterShield,\n\tearthShieldPPM: 0,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.RunicManaInjector,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n});\n","import {\n\tClass,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\n\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecRestorationShaman, {\n\tcssClass: 'restoration-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\twarnings: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecRestorationShaman>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatSpellCrit, player.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P1_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.22,\n\t\t\t[Stat.StatSpirit]: 0.05,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.67,\n\t\t\t[Stat.StatSpellHaste]: 1.29,\n\t\t\t[Stat.StatMP5]: 0.08,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.RaidHealingTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tdivineSpirit: true,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\tsanctifiedRetribution: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: 2,\n\t\t\tvampiricTouch: true,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tjudgementOfWisdom: true,\n\t\t\tmisery: true,\n\t\t\tcurseOfElements: true,\n\t\t\tshadowMastery: true,\n\t\t}),\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanInputs.ShamanShieldInput,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tShamanInputs.TriggerEarthShield,\n\t\t\tOtherInputs.TankAssignment\n\t\t],\n\t},\n\tcustomSections: [\n\t\tTotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.RaidHealingTalents,\n\t\t\tPresets.TankHealingTalents,\n\t\t],\n\t\trotations: [\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET,\n\t\t\tPresets.P3_PRESET,\n\t\t\tPresets.P4_PRESET,\n\t\t],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecRestorationShaman>): APLRotation => {\n\t\treturn APLRotation.create();\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecRestorationShaman,\n\t\t\ttooltip: specNames[Spec.SpecRestorationShaman],\n\t\t\tdefaultName: 'Restoration',\n\t\t\ticonUrl: getSpecIcon(Class.ClassShaman, 2),\n\n\t\t\ttalents: Presets.RaidHealingTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class RestorationShamanSimUI extends IndividualSimUI<Spec.SpecRestorationShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRestorationShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","ShamanShield","NoShield","tooltip","actionId","ActionId","fromSpellId","WaterShield","LightningShield","TriggerEarthShield","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","showWhen","player","getTalents","earthShield","changeEmitter","TypedEvent","onAny","specOptionsChangeEmitter","rotationChangeEmitter","talentsChangeEmitter","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET","P3Gear","P4_PRESET","P4Gear","TankHealingTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfEarthlivingWeapon","major2","GlyphOfEarthShield","major3","GlyphOfLesserHealingWave","minor2","ShamanMinorGlyph","GlyphOfWaterShield","minor1","GlyphOfRenewedLife","minor3","GlyphOfGhostWolf","RaidHealingTalents","GlyphOfChainHeal","DefaultOptions","RestorationShamanOptions","shield","earthShieldPPM","DefaultConsumes","Consumes","defaultPotion","Potions","RunicManaInjector","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","SPEC_CONFIG","registerSpecConfig","Spec","SpecRestorationShaman","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","stats","Stats","addStat","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.RaidHealingTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","playerIconInputs","ShamanInputs.ShamanShieldInput","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","ShamanInputs.TriggerEarthShield","OtherInputs.TankAssignment","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.TankHealingTalents","rotations","Presets.PRERAID_PRESET","Presets.P2_PRESET","Presets.P3_PRESET","Presets.P4_PRESET","autoRotation","_player","APLRotation","raidSimPresets","spec","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassShaman","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceDraenei","Horde","RaceOrc","defaultGear","RestorationShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}